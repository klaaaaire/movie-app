{"ast":null,"code":"var _jsxFileName = \"/Users/claire/Documents/GitHub/movie-app/src/pages/PageSearch.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport movieCard from '../components/MovieCard';\nimport { API_KEY, API_TOKEN } from '../globals/globals';\nimport Movies from '../components/Movies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PageSearch({\n  sort\n}) {\n  _s();\n\n  const [q, setQ] = useState(\"\");\n  let [movies, setMovies] = useState([]); // search by movie title only\n\n  const [searchParam, setSearchParam] = useState([\"title\"]);\n  useEffect(() => {\n    // using async since we need the data before load the page\n    const fetchMovies = async () => {\n      // fetch() - built in function\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${sort}?&language=en-US&page=1`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + API_TOKEN\n        }\n      });\n      let rawMovieData = await res.json();\n    };\n\n    fetchMovies();\n  }, [sort]);\n  return items.filter(item => {\n    return searchParam.some(newItem => {\n      return item[newItem].toString().toLowerCase().indexOf(q.toLowerCase()) > -1;\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"search-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        name: \"search-form\",\n        id: \"search-form\",\n        className: \"search-input\",\n        placeholder: \"Search for...\",\n        value: q,\n        onChange: e => setQ(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Search movies here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movies, {\n        movieData: movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PageSearch, \"CR7AgqU3aJkJPbLNNgMHezX+g54=\");\n\n_c = PageSearch;\nexport default PageSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageSearch\");","map":{"version":3,"sources":["/Users/claire/Documents/GitHub/movie-app/src/pages/PageSearch.js"],"names":["React","useEffect","useState","movieCard","API_KEY","API_TOKEN","Movies","PageSearch","sort","q","setQ","movies","setMovies","searchParam","setSearchParam","fetchMovies","res","fetch","headers","rawMovieData","json","items","filter","item","some","newItem","toString","toLowerCase","indexOf","e","target","value","map","movie"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,oBAAnC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAAA;;AAE1B,QAAM,CAACC,CAAD,EAAIC,IAAJ,IAAYR,QAAQ,CAAC,EAAD,CAA1B;AACA,MAAI,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAAlC,CAH0B,CAK1B;;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,CAAC,OAAD,CAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX;AACA,UAAMc,WAAW,GAAG,YAAW;AAC3B;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,sCAAqCT,IAAK,yBAA5C,EAAsE;AACzFU,QAAAA,OAAO,EAAE;AACL,oBAAU,kBADL;AAEL,0BAAgB,kBAFX;AAGL,2BAAiB,YAAWb;AAHvB;AADgF,OAAtE,CAAvB;AAQA,UAAIc,YAAY,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAzB;AACH,KAXD;;AAYAL,IAAAA,WAAW;AAEd,GAhBQ,EAgBN,CAACP,IAAD,CAhBM,CAAT;AAmBA,SAAOa,KAAK,CAACC,MAAN,CAAcC,IAAD,IAAU;AAC1B,WAAOV,WAAW,CAACW,IAAZ,CAAkBC,OAAD,IAAa;AACjC,aACIF,IAAI,CAACE,OAAD,CAAJ,CACCC,QADD,GAECC,WAFD,GAGCC,OAHD,CAGSnB,CAAC,CAACkB,WAAF,EAHT,IAG4B,CAAC,CAJjC;AAMH,KAPM,CAAP;AAQH,GATM,CAAP;AAcF,sBAEE;AAAA,4BACI;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,aAA1B;AAAwC,QAAA,EAAE,EAAC,aAA3C;AAAyD,QAAA,SAAS,EAAC,cAAnE;AAAkF,QAAA,WAAW,EAAC,eAA9F;AAA8G,QAAA,KAAK,EAAElB,CAArH;AAAwH,QAAA,QAAQ,EAAKoB,CAAD,IAAOnB,IAAI,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV;AAA/I;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAA,gBACKpB,MAAM,CAACqB,GAAP,CAAYC,KAAD,iBACR,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAIA;AAArB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAgBD;;GAzDQ1B,U;;KAAAA,U;AA2DT,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport movieCard from '../components/MovieCard';\nimport { API_KEY, API_TOKEN } from '../globals/globals';\nimport Movies from '../components/Movies';\n\nfunction PageSearch({ sort }) {\n\n    const [q, setQ] = useState(\"\");\n    let [movies, setMovies] = useState([]);\n\n    // search by movie title only\n    const [searchParam, setSearchParam] = useState([\"title\"]);\n\n    useEffect(()=> {\n        // using async since we need the data before load the page\n        const fetchMovies = async() => {\n            // fetch() - built in function\n            const res = await fetch(`https://api.themoviedb.org/3/movie/${sort}?&language=en-US&page=1`, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer '+ API_TOKEN \n                }\n                \n            });\n            let rawMovieData = await res.json();\n        }\n        fetchMovies();\n\n    }, [sort]);\n\n\n    return items.filter((item) => {\n        return searchParam.some((newItem) => {\n            return (\n                item[newItem]\n                .toString()\n                .toLowerCase()\n                .indexOf(q.toLowerCase()) > -1\n            )\n        })\n    })\n\n\n\n\n  return (\n\n    <div>\n        <label htmlFor=\"search-form\">\n            <input type=\"search\" name=\"search-form\" id=\"search-form\" className=\"search-input\" placeholder=\"Search for...\" value={q} onChange = {(e) => setQ(e.target.value)}/>\n            <span>Search movies here...</span>\n        </label>\n\n        <ul>\n            {movies.map((movie) => (\n                <Movies movieData = {movie} />\n            ))}\n    \n        </ul>\n    </div>\n  )\n}\n\nexport default PageSearch"]},"metadata":{},"sourceType":"module"}